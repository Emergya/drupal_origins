<?php

/**
 * Implements hook_install().
 */
function drupal_origins_security_install() {
  # # # # # # # # # # # # # # # #
  # # LOGIN SECURITY SETTINGS # #
  # # # # # # # # # # # # # # # #
  variable_set('login_security_track_time', 24);
  variable_set('login_security_host_wrong_count', 5);
  variable_set('login_security_host_wrong_count_hard', 10);
  variable_set('login_security_activity_threshold', 25);
  variable_set('login_security_disable_core_login_error', 1);
  variable_set('login_security_notice_attempts_available', 1);

  // Get super admin user for configure teh following parameters:
  $admin_user = db_query('SELECT name FROM {users} WHERE uid = 1')->fetchObject();
  variable_set('login_security_user_blocked_email_user', $admin_user->name);
  variable_set('login_security_login_activity_email_user', $admin_user->name);

  # # # # # # # # # # # # # # # #
  # # PASSWORD POLICY SETTINGS # #
  # # # # # # # # # # # # # # # #
  // General password policy settings:
  variable_set('password_policy_block', 1);
  variable_set('password_policy_show_restrictions', 1);
  variable_set('password_policy_force_change_reset', 1);

  // Add custom Password Security rules:
  $password_policies = array(
    'Admins policy' => array(
      'name' => 'Admin roles policy',
      'description' => 'password plicy for admin roles',
      'enabled' => 1,
      'policy' => 'a:7:{s:7:"history";s:1:"2";s:10:"complexity";s:1:"4";s:5:"digit";s:1:"1";s:8:"username";s:1:"1";s:11:"punctuation";s:1:"1";s:9:"uppercase";s:1:"1";s:6:"length";s:1:"6";}',
      'expiration' => 90,
      'warning' => 80,
      'weight' => 0,
      'role' => 3,
    ),
    'Autenticated policy' => array(
      'name' => 'Autenticated role policy',
      'description' => 'password plicy for autenticated roles',
      'enabled' => 1,
      'policy' => 'a:1:{s:6:"length";s:1:"6";}',
      'expiration' => 0,
      'weight' => 1,
      'warning' => '',
      'role' => 2,
    ),
  );

  foreach ($password_policies as &$policy) {
    $pid = db_insert('password_policy')
      ->fields(array(
        'name' => $policy['name'],
        'description' => $policy['description'],
        'enabled' => $policy['enabled'],
        'policy' => $policy['policy'],
        'expiration' => !empty($policy['expiration']) ? $policy['expiration'] : 0,
        'warning' => str_replace(' ', '', $policy['warning']),
        'weight' => $policy['weight'],
      ))
      ->execute();

    db_insert('password_policy_role')
      ->fields(array(
        'pid' => $pid,
        'rid' => $policy['role'],
      ))
      ->execute();
    // Notify by watchdog:
    watchdog('password_policy', 'New policy %name created.', array('%name' => $policy['name']),
      WATCHDOG_NOTICE, l(t('edit'), 'admin/config/people/password_policy/' . $pid . '/edit'));
  }

  # # # # # # # # # # # # # #
  # # AUTOLOGOUT SETTINGS # #
  # # # # # # # # # # # # # #
  // Enable role timeout for autenticated users:
  variable_set('autologout_role_2', 1);
  variable_set('autologout_role_logout', 1);

  # # # # # # # # # # # # # # # # # # #
  # # EU COOKIE COMPLIANCE SETTINGS # #
  # # # # # # # # # # # # # # # # # # #
  // Add permission 'display EU Cookie Compliance popup' to all roles:
  $permissions = array('display EU Cookie Compliance popup' => 'display EU Cookie Compliance popup');
  user_role_grant_permissions(1, array_keys($permissions));
  user_role_grant_permissions(2, array_keys($permissions));
  user_role_grant_permissions(3, array_keys($permissions));

  // customize the default popup settings:
  $eu_popup_settings = eu_cookie_compliance_get_settings();
  if (!empty($eu_popup_settings)) {
    global $user, $language;

    // Enable popup and set our default settings for EU cookies compliance:
    $eu_popup_settings['popup_enabled'] = 1;
    $eu_popup_settings['popup_clicking_confirmation'] = 0;
    $eu_popup_settings['popup_position'] = 0;
    $eu_popup_settings['popup_agree_button_message'] = t('OK, I agree');
    $eu_popup_settings['popup_disagree_button_message'] = t('No, give me more info');
    $eu_popup_settings['popup_agreed_enabled'] = 0;
    $eu_popup_settings['popup_hide_agreed'] = 0;
    $eu_popup_settings['popup_find_more_button_message'] = t('More info');
    $eu_popup_settings['popup_hide_button_message'] = t('Hide');
    $eu_popup_settings['popup_link_new_window'] = 1;
    $eu_popup_settings['popup_height'] = '';
    $eu_popup_settings['popup_width'] = '100%';
    $eu_popup_settings['popup_delay'] = 1;
    $eu_popup_settings['popup_bg_hex'] = '0779BF';
    $eu_popup_settings['popup_text_hex'] = 'ffffff';
    $eu_popup_settings['domains_option'] = 1;
    $eu_popup_settings['domains_list'] = '';
    $eu_popup_settings['exclude_paths'] = '';

    // Create a basic page with a default private policies:
    $cookies_page_values = array(
      'type' => 'page',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
    );
    $private_policy = entity_create('node', $cookies_page_values);
    $private_policy_wrapper = entity_metadata_wrapper('node', $private_policy);
    $private_policy_wrapper->title->set('Private policies');
    $private_policy_wrapper->body->set(array('value' => 'A bunch of text about things that interest me'));
    $private_policy_wrapper->save();

    // Add the default page with private policies to EU cookie compliance setting:
    if ($private_policy_page_id = $private_policy_wrapper->getIdentifier()) {
      $eu_popup_settings['popup_link'] = 'node/' . $private_policy_page_id;
    }
    // Set the new settings:
    variable_set('eu_cookie_compliance_' . $language->language, $eu_popup_settings);
  }
}